current = 1
prevCurrent = current
found = current
lastFound = current
circle = 1
perhapsNewCircle = false

radius = ?

// Remove stations outside the radius
stationsInRadius = stations.filter((station) => return getDistance() < radius);

// Sort from bigger to smaller order
stationsInRadius.sort();

// In case of detecting two stations simultaneously
stationsInRadius.forEach((found) => {
    // Start new circle
    if(found == 1 && prevCurrent != current) {
        current = 1;
        prevCurrent = 1;
        found = 1;
        lastFound = 1;
        circle++;
        perhapsNewCircle = false;
    }
    // Simple detect
    else if(found = current + 1) {
        prevCurrent = current;
        current = found;
        lastFound = found;
        perhapsNewCircle = false;
    }
    // Detect after jump over
    else if(found = lastFound + 1) {
        prevCurrent = current;
        current = found;
        lastFound = found;

        // Increase circle in case of jump over the ending station
        if(perhapsNewCircle) {
            circle++;
            perhapsNewCircle = false;
        }
    // Register found station just in case
    } else {
        // In case we moving to bus station
        perhapsNewCircle = current > found && found < lastFound;
        
        lastFound = found;
    }
});